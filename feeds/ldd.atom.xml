<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>美是美的创造者</title><link href="http://tonyho.github.io/" rel="alternate"></link><link href="http://tonyho.github.io/feeds/ldd.atom.xml" rel="self"></link><id>http://tonyho.github.io/</id><updated>2014-01-10T00:00:00+08:00</updated><entry><title>Linux设备驱动开发基础之互斥与同步基础</title><link href="http://tonyho.github.io/Linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%92%E6%96%A5%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%9F%BA%E7%A1%80.html" rel="alternate"></link><updated>2014-01-10T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2014-01-10:Linux设备驱动开发基础之互斥与同步基础.html</id><summary type="html">&lt;h1&gt;Linux设备驱动开发基础之互斥与同步基础&lt;/h1&gt;
&lt;h2&gt;一些概念&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;竟态：多个执行路径对同一资源进行操作时可能引发的资源混乱行为（①）。执行路径为并发源。&lt;/li&gt;
&lt;li&gt;临界区：对共享资源的访问代码片段。临界区只能是在一个进程内部而无法跨进程，因为其不是一个对象，我们无法定义一个临界区对象来告知其他进程，而像Mutex和SpinLock都可以。参考&lt;a href="http://blogs.msdn.com/b/larryosterman/archive/2005/08/24/455741.aspx?Redirected=true"&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;中断和抢占：一般都是在中断需要返回前会调用重新调度函数，如果没有禁止抢占，那么就会被高优先级的进程抢占。有的地方可以被中断但是进程必须不被抢占，那么只需要禁止抢占就行了。例如spin_lock是可以被中断的，但是不能被抢占,因为被其他进程抢占后会造成死锁。当然因为中断中也可能要去获得这个锁而造成死锁，这个就是spin_lock_irq的来由。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;原子操作与原子变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;原子操作：每一步都是不可分割的。&lt;/li&gt;
&lt;li&gt;原子变量：对此变量的操作（增加或者减小）是原子操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;单核处理器+抢占&lt;/code&gt; 与 &lt;code&gt;多核处理器&lt;/code&gt;在许多发面有类似的特性。&lt;/p&gt;
&lt;h2&gt;并发的来源&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;li&gt;调度器的可抢占性&lt;/li&gt;
&lt;li&gt;多核、多处理器的并发执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;中断&lt;/h4&gt;
&lt;p&gt;一般对于本地CPU（就是此刻运行这个代码的CPU或者CPU核），控制其中断使用的函数是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local_irq_enable&lt;/li&gt;
&lt;li&gt;local_irq_disable&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;调度器的可抢占性&lt;/h4&gt;
&lt;p&gt;调度器的控制函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preempt_disable&lt;/li&gt;
&lt;li&gt;preempt_enable&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;多核、多处理器的并发执行&lt;/h4&gt;
&lt;p&gt;以上是并发的来源，而下面的方法都是对并发的处理和控制，因此都是&lt;strong&gt;全局的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;自旋锁=禁止抢占+原子设置V变量&lt;/h2&gt;
&lt;h4&gt;特征&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;对于spin_lock用得比较多的是对全局变量访问时的保护&lt;/li&gt;
&lt;li&gt;spin_lock是全局的&lt;/li&gt;
&lt;li&gt;普通的自旋锁(没有disable_IRQ)有可能会死锁&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;自旋锁和信号量的区别&lt;/h4&gt;
&lt;h6&gt;是否会引发睡眠&lt;/h6&gt;
&lt;p&gt;自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环
查看是否该自旋锁的保持者已经释放了锁，“自旋”就是“在原地打转”。而信号量则引起调
用者睡眠，它把进程从运行队列上拖出去，除非获得锁。&lt;/p&gt;
&lt;p&gt;spin_lock，禁止抢占，并且用一个变量来指明资源是否真正被使用。&lt;/p&gt;
&lt;h6&gt;是否会造成死锁&lt;/h6&gt;
&lt;p&gt;spin_lock因为没有禁止中断，所以有可能出现死锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在A进程用自旋锁锁住并使用资源B，处于临界区中，接着被中断，而中断中又去尝试使用资源B，这将造成死锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;spin_lock的组成和原理&lt;/h5&gt;
&lt;p&gt;spin 结构体中里面有个变量，这个变量在spin_lock中被原子改变。因此其他地方再去spin_lock的时候会发现这个变量已经改变，表明锁已经被使用了，此时将在这里自旋等待。&lt;/p&gt;
&lt;h5&gt;spin_lock_irq(Save)变体&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;spin_lock_irq&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;spin_lock_irq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;spin_lock&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;disableIRQ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而普通的spin_lock为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;spin_lock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;原子设置&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;preempt_disable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个使得就解决了上面因为中断而造成的死锁的可能性。
2. spin_lock_bh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;softIRQ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;非阻塞版本&lt;/p&gt;
&lt;p&gt;spin_trylock：try&lt;/p&gt;
&lt;h5&gt;spin_lock_irq使用注意&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;任何拥有自旋锁的代码都必须是原子的，不能休眠：例如kmalloc中有GFP_KERNEL掩码时，将有可能造成休眠&lt;/li&gt;
&lt;li&gt;在中断中如果要使用自旋锁应该使用&lt;code&gt;spin_lock_irq&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;信号量&lt;/h2&gt;
&lt;h4&gt;特点&lt;/h4&gt;
&lt;p&gt;允许调用它的进程进入睡眠放入到wait_list中，见下面的结构体成员。&lt;/p&gt;
&lt;h4&gt;原理&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Please don&amp;#39;t access any members of this structure directly */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;spinlock_t      lock;
unsigned int        count;
struct list_head    wait_list;
    };
1. lock：一个自旋锁用于对count变量的原子更改。
1. count：记录资源数目。
1. wait_list：将无法获取信号量的进程放入队列中。&lt;/p&gt;
&lt;h4&gt;操作&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;DOWN:&lt;/li&gt;
&lt;li&gt;count--&lt;/li&gt;
&lt;li&gt;UP:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;count++;唤醒在wait_list中的等待进程&lt;/p&gt;
&lt;h4&gt;UP/DOWN的变体&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;down：等待的进程无法被（Ctrl+D）中断,将阻塞在down中。&lt;/li&gt;
&lt;li&gt;down_interruptible：等待的进程可以被中断，需要检查返回值以确定究竟是什么原因导致的返回。&lt;/li&gt;
&lt;li&gt;down_trylock：如果无法获取信号量则直接返回而不是进入休眠。&lt;/li&gt;
&lt;li&gt;up函数只有一个。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;互斥锁&lt;/h2&gt;
&lt;h4&gt;构成&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/&lt;em&gt; 1: unlocked, 0: locked, negative: locked, possible waiters &lt;/em&gt;/
atomic_t        count;
spinlock_t      wait_lock;
struct list_head    wait_list;
    #if defined(CONFIG_DEBUG_MUTEXES) || defined(CONFIG_SMP)
struct task_struct  &lt;em&gt;owner;
    #endif
    #ifdef CONFIG_DEBUG_MUTEXES
const char      &lt;/em&gt;name;
void            *magic;
    #endif
    #ifdef CONFIG_DEBUG_LOCK_ALLOC
struct lockdep_map  dep_map;
    #endif
    };
精简一下就是：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;struct mutex {
    /&lt;em&gt; 1: unlocked, 0: locked, negative: locked, possible waiters &lt;/em&gt;/
    atomic_t        count;
    spinlock_t      wait_lock;
    struct list_head    wait_list;
};
与上面的semophore相比，就是count的类型从&lt;code&gt;unsigned int&lt;/code&gt;编程了&lt;code&gt;atomic_t&lt;/code&gt;,且用1表示没有被锁，0表示锁了。而semophore里面的count则是用来表示可以获取资源的数目。互斥锁就是用来表示一个进程可以获取资源的。&lt;/p&gt;
&lt;h4&gt;操作&lt;/h4&gt;
&lt;p&gt;与semophore一致有UP和DOWN。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;免锁机制RCU：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RCU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preempt_disable&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;每次写都分配一个新空间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;免锁的代价：规则约定&lt;/h4&gt;
&lt;p&gt;必须在临界区读。&lt;/p&gt;
&lt;h4&gt;RCU实现机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;写：先重新分配的一个地方，得到一个指针New，然后写进去，接着将这个new指针替换掉指向老数据的老指针Old。这样子完成了数据的刷新。当然指针的替换是原子操作的。最后还需要注册一个回调函数，使得所有对old指针的引用都完成后，用于释放以前分区的空间。&lt;/li&gt;
&lt;li&gt;释放旧空间：如果只有一个访问，那么读取者的临界区的出口其实就是这个回调函数调用的时机，因为读取者能且仅能在临界区引用指针，但是一个系统很可能有多个CPU运行多个线程去读取和引用old指针，所以当&lt;strong&gt;所有的CPU的发生过一次调度后&lt;/strong&gt;（就是绝对不可能在临界区，因为临界区关闭了调度），就可以认为是对老指针引用的完毕。&lt;/li&gt;
&lt;li&gt;读：构建一个临界区，&lt;strong&gt;并在且只在&lt;/strong&gt;临界区内使用指针访问数据。构建临界区的原因是防止在使用指针访问的时候数据被写。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;①来源于深入Linux设备驱动程序内核机制&lt;/p&gt;
&lt;p&gt;②&lt;a href="http://blogs.msdn.com/b/larryosterman/archive/2005/08/24/455741.aspx?Redirected=true"&gt;Why don't critical sections work cross process?&lt;/a&gt;&lt;/p&gt;</summary><category term="ES"></category><category term="LDD"></category></entry><entry><title>Linux驱动开发之内存管理基础</title><link href="http://tonyho.github.io/Linux%20MemoryManagement.html" rel="alternate"></link><updated>2013-12-30T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2013-12-30:Linux MemoryManagement.html</id><summary type="html">&lt;p&gt;内存管理主要分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物理内存管理&lt;/li&gt;
&lt;li&gt;虚拟内存管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;物理内存管理&lt;/h2&gt;
&lt;h3&gt;页&lt;/h3&gt;
&lt;p&gt;物理内存以页（&lt;code&gt;page frame&lt;/code&gt;）为单位，一般为4K，如果是4G的内存那么，将会有一个大小为&lt;code&gt;4G/4K=1M&lt;/code&gt;的数组&lt;code&gt;mem_map&lt;/code&gt;，每一项保存着每一页的地址。&lt;/p&gt;
&lt;h3&gt;Zone&lt;/h3&gt;
&lt;p&gt;Zone是一些连续物理页的合集，参看下面的图3-2。将物理页分成了3个Zone区：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ZONE_HIGHMEM：物理内存高于896M的区域&lt;/li&gt;
&lt;li&gt;ZONE_NORMAL：常规内存区域，如果DMA可以在此区域做内存访问，也可以使用这块区域&lt;/li&gt;
&lt;li&gt;ZONE_DMA：0~nM，不同的架构和不同的芯片都可能不一样&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为数组mem_map与物理页对应，因此mem_map也被默认分为了上面三个区域。&lt;/p&gt;
&lt;h3&gt;内存节点&lt;/h3&gt;
&lt;p&gt;分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UMA：只有一个内存节点，CPU访问内存的内存的任何地址的速度是一样的。&lt;/li&gt;
&lt;li&gt;NUMA：多&lt;code&gt;个&lt;/code&gt;处理器，每个处理器都有自己的本地内存，通过总线通讯。访问本地内存比访问其他节点的内存快。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;物理页面分配器：伙伴系统&lt;/h2&gt;
&lt;h3&gt;伙伴系统的特征与作用：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用物理页为单位&lt;/li&gt;
&lt;li&gt;记录哪些是空闲的物理页，那些是内核使用过的物理页&lt;/li&gt;
&lt;li&gt;可以让系统分配一个或者多个&lt;code&gt;连续的物理页&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kernel启动后会映射&lt;code&gt;物理页面直接映射区&lt;/code&gt;，但是&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;区域并没有被映射到内核的虚拟地址上：&lt;/p&gt;
&lt;p&gt;&lt;img alt="物理内存等映射" src="./static/MemoryManagement/pics/mem_map.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;gfp_mask&lt;/h3&gt;
&lt;p&gt;要指定分配哪个ZONE的物理页，以及分配时的行为是由&lt;code&gt;gfp_mask&lt;/code&gt;（gfp：Get free page）掩码的不同组合成的flag来决定的。
对于分配到哪个区域的掩码定义有：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define __GFP_DMA   ((__force gfp_t)___GFP_DMA)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_HIGHMEM   ((__force gfp_t)___GFP_HIGHMEM)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_DMA32 ((__force gfp_t)___GFP_DMA32)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_MOVABLE   ((__force gfp_t)___GFP_MOVABLE) &lt;/span&gt;
&lt;span class="c"&gt;#define GFP_ZONEMASK    (__GFP_DMA|__GFP_HIGHMEM|__GFP_DMA32|__GFP_MOVABLE)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不指定，默认是分配在&lt;code&gt;ZONE_NORMAL&lt;/code&gt;区域。当然以&lt;code&gt;__&lt;/code&gt;开头指明这些宏是在头文件内部使用，kernel还定义了以这些为基础的宏，在驱动中应该使用这些进一步包装的宏：
1. __GFP_NORMAL：在ZONE_NORMAL区域分配，如果&lt;/p&gt;
&lt;p&gt;另外还有几个常用的mask：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define GFP_ATOMIC  (__GFP_HIGH)&lt;/span&gt;
&lt;span class="c"&gt;#define GFP_KERNEL  (__GFP_WAIT | __GFP_IO | __GFP_FS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;GFP_ATOMIC：没有&lt;code&gt;__GFP_WAIT&lt;/code&gt;表明&lt;code&gt;不允许中断且不需要被调度出去&lt;/code&gt;。在中断例程中常用。&lt;/li&gt;
&lt;li&gt;GFP_KERNEL：有可能会被中断和调度出去。驱动中最常用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;页面分配规则和优先级&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不指定：默认使用&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;，如果不足那么到&lt;code&gt;ZONE_DMA&lt;/code&gt;分配空间。&lt;/li&gt;
&lt;li&gt;__GFP_HIGHMEM：先到&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;分配空间，若不足，则到&lt;code&gt;ZONE_NORMAL&lt;/code&gt;去分配页面，如果还是不够，那么就会到&lt;code&gt;ZONE_DMA&lt;/code&gt;中去分配。就是就是从上到下的找空间。&lt;/li&gt;
&lt;li&gt;__GFP_DMA：在&lt;code&gt;ZONE_DMA&lt;/code&gt;中分配页面，如果空间不足，那么失败返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;核心页面分配函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;alloc_pages&lt;/li&gt;
&lt;li&gt;__get_free_pages：无法在HIGHMEM分配页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个函数最终都是调用&lt;code&gt;alloc_pages_node&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;alloc_pages与free_pages&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/tonyhoaspire/item/7a952ec8cbd84c65f7c95d04"&gt;这里&lt;/a&gt;有一个使用此函数的例子。加载这个例子的模块有可能会出现问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;mem_map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以查看在/proc/kallsys或者是System.map中是否有这个变量。&lt;/p&gt;
&lt;p&gt;这个例子里面也用到了&lt;code&gt;page_address&lt;/code&gt;来获得内核虚拟地址(&lt;code&gt;KVA&lt;/code&gt;)。
alloc_pages的原型如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* @gfp_mask [in] 就是上面说的那些掩码组合flag&lt;/span&gt;
&lt;span class="cm"&gt;* @order [in] 需要分配空间的2的指数值&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;alloc_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gfp_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="n"&gt;alloc_pages_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numa_node_id&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;gfp_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：
     struct page *pages = alloc_pages(GFP_KERNEL,3);  //分配2^3=8个物理页  &lt;br /&gt;
&lt;code&gt;free_pages&lt;/code&gt;用来释放alloc_pages分配的页。&lt;/p&gt;
&lt;h4&gt;__get_free_pages&lt;/h4&gt;
&lt;p&gt;这个函数除了gfp_mask无法使用__GFP_HIGHTMEM外，与alloc_pages没有什么差别。
使用&lt;code&gt;__free_pages&lt;/code&gt;来释放用此函数分配的页。&lt;/p&gt;
&lt;h3&gt;get_zeroed_page和__get_dma_pages&lt;/h3&gt;
&lt;p&gt;一个是分配填充为0的页，一个是在ZONE_DMA分配页。&lt;/p&gt;
&lt;h2&gt;slab分配器：分配比一个页更小的空间&lt;/h2&gt;
&lt;p&gt;在字符设备驱动中，经常有：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cdev&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cdev_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cdev&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;GFP_KERNEL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里一个cdev结构体比一个page的大小（4KB）小，使用的是kmalloc来分配。slab就是用来完成小空间分配需要的。&lt;/p&gt;
&lt;p&gt;kmem_cache包含多个slab，根据不同的order的放在一个队列上面。而每一个order下又根据使用情况分为三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空闲&lt;/li&gt;
&lt;li&gt;部分空闲&lt;/li&gt;
&lt;li&gt;已满&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="物理内存等映射" src="./static/MemoryManagement/pics/slab.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;slab中的kmalloc和kzalloc&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;slab只能在低端内存区域分配空间，所以即使kmalloc的gfp_mask使用__GFP_HIGHMEM也无法分配到高端内存。&lt;/li&gt;
&lt;li&gt;kzalloc == kmalloc(size,__GFP_ZEROED|flag)&lt;/li&gt;
&lt;li&gt;获得的是连续的物理内存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;虚拟内存管理&lt;/h2&gt;
&lt;h4&gt;vmalloc&lt;/h4&gt;
&lt;p&gt;获得连续的虚拟内存&lt;/p&gt;
&lt;h4&gt;ioremap&lt;/h4&gt;
&lt;p&gt;用来将vmalloc区域的某段虚拟内存区域映射到IO类型的地址。
对于ioremap：
1. 对于外设而言尽可能的使用&lt;code&gt;ioremap_nocache&lt;/code&gt;，这样子可以使得这段区域不被cache
2. 因为IO空间在不同的体系架构上有不同的解释，为了屏蔽这些区别可以使用read[b,w]、write[b,w]
3. 使用方法是&lt;code&gt;ioremap_nocache(physical start address,size)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Per-CPU变量&lt;/h2&gt;
&lt;p&gt;per-CPU变量就是一个变量每个CPU都有一份，这样在访问这些变量的时候就不需要上锁保护以免同时被其他CPU修改，提高了效率。&lt;/p&gt;
&lt;p&gt;per-CPU被放到了特定的段内，且每个CPU都有自己的段，访问的时候就访问自己的段内的变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;__percpu&lt;/span&gt; &lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;setction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data..percpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;内存管理整体图&lt;/h2&gt;
&lt;p&gt;在网上看到的一个全局框图（图中的ZUNE应该为ZONE）：
&lt;img alt="Overview" src="./static/MemoryManagement/pics/MemoryManagement.gif" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源于&lt;a href="http://cupic.img168.net/bbsfile/forum/linux/month_0811/20081111_9477e6fe879a69d35b15pPat2RQUajuk.gif"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;★1.CSAPP 2nd Edition：极好的书，对应的VM章节也是非常好，极其容易理解，踏实学完这本书对嵌入式开发有很大的帮助。&lt;/p&gt;
&lt;p&gt;☆2.Linux内核修炼之道：作者还有一本书比这本书有名《Linux那些事儿之我是USB》。修炼之道在大学的时候就看到了，但是看完确实在工作后的地铁上，这本书可以帮助初学linux内核的人对内核有一个总体的认识，并对linux的一些设计的进化和历史有一定的了解。同时讲述了如何查看一个驱动的代码，这些点点滴滴对于初学者是极好的辅助。推荐。&lt;/p&gt;
&lt;p&gt;★3.深入Linux设备驱动程序内核机制：博客前面的图片来源于此书。另外，这本书很不错，刚开始学习Linux设备驱动的同学可以看看，需要注意的是这本书的内核相对于现在的内核算是有点老了，但是瑕不掩瑜。同时可以结合&lt;code&gt;Linux Kernel Development&lt;/code&gt;一起学习。&lt;/p&gt;</summary><category term="ES"></category><category term="LDD"></category><category term="MemoryManagement"></category></entry></feed>