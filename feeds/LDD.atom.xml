<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>美是美的创造者</title><link href="http://tonyho.github.io/" rel="alternate"></link><link href="http://tonyho.github.io/feeds/LDD.atom.xml" rel="self"></link><id>http://tonyho.github.io/</id><updated>2013-12-30T00:00:00+08:00</updated><entry><title>Linux驱动开发之内存管理基础</title><link href="http://tonyho.github.io/Linux%20MemoryManagement.html" rel="alternate"></link><updated>2013-12-30T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2013-12-30:Linux MemoryManagement.html</id><summary type="html">&lt;p&gt;内存管理主要分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物理内存管理&lt;/li&gt;
&lt;li&gt;虚拟内存管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;物理内存管理&lt;/h2&gt;
&lt;h3&gt;页&lt;/h3&gt;
&lt;p&gt;物理内存以页（&lt;code&gt;page frame&lt;/code&gt;）为单位，一般为4K，如果是4G的内存那么，将会有一个大小为&lt;code&gt;4G/4K=1M&lt;/code&gt;的数组&lt;code&gt;mem_map&lt;/code&gt;，每一项保存着每一页的地址。&lt;/p&gt;
&lt;h3&gt;Zone&lt;/h3&gt;
&lt;p&gt;Zone是一些连续物理页的合集，参看下面的图3-2。将物理页分成了3个Zone区：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ZONE_HIGHMEM：物理内存高于896M的区域&lt;/li&gt;
&lt;li&gt;ZONE_NORMAL：常规内存区域，如果DMA可以在此区域做内存访问，也可以使用这块区域&lt;/li&gt;
&lt;li&gt;ZONE_DMA：0~nM，不同的架构和不同的芯片都可能不一样&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为数组mem_map与物理页对应，因此mem_map也被默认分为了上面三个区域。&lt;/p&gt;
&lt;h3&gt;内存节点&lt;/h3&gt;
&lt;p&gt;分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UMA：只有一个内存节点，CPU访问内存的内存的任何地址的速度是一样的。&lt;/li&gt;
&lt;li&gt;NUMA：多&lt;code&gt;个&lt;/code&gt;处理器，每个处理器都有自己的本地内存，通过总线通讯。访问本地内存比访问其他节点的内存快。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;物理页面分配器：伙伴系统&lt;/h2&gt;
&lt;h3&gt;伙伴系统的特征与作用：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用物理页为单位&lt;/li&gt;
&lt;li&gt;记录哪些是空闲的物理页，那些是内核使用过的物理页&lt;/li&gt;
&lt;li&gt;可以让系统分配一个或者多个&lt;code&gt;连续的物理页&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kernel启动后会映射&lt;code&gt;物理页面直接映射区&lt;/code&gt;，但是&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;区域并没有被映射到内核的虚拟地址上：&lt;/p&gt;
&lt;p&gt;&lt;img alt="物理内存等映射" src="./static/MemoryManagement/pics/mem_map.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;gfp_mask&lt;/h3&gt;
&lt;p&gt;要指定分配哪个ZONE的物理页，以及分配时的行为是由&lt;code&gt;gfp_mask&lt;/code&gt;（gfp：Get free page）掩码的不同组合成的flag来决定的。
对于分配到哪个区域的掩码定义有：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define __GFP_DMA   ((__force gfp_t)___GFP_DMA)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_HIGHMEM   ((__force gfp_t)___GFP_HIGHMEM)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_DMA32 ((__force gfp_t)___GFP_DMA32)&lt;/span&gt;
&lt;span class="c"&gt;#define __GFP_MOVABLE   ((__force gfp_t)___GFP_MOVABLE) &lt;/span&gt;
&lt;span class="c"&gt;#define GFP_ZONEMASK    (__GFP_DMA|__GFP_HIGHMEM|__GFP_DMA32|__GFP_MOVABLE)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不指定，默认是分配在&lt;code&gt;ZONE_NORMAL&lt;/code&gt;区域。当然以&lt;code&gt;__&lt;/code&gt;开头指明这些宏是在头文件内部使用，kernel还定义了以这些为基础的宏，在驱动中应该使用这些进一步包装的宏：
1. __GFP_NORMAL：在ZONE_NORMAL区域分配，如果&lt;/p&gt;
&lt;p&gt;另外还有几个常用的mask：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define GFP_ATOMIC  (__GFP_HIGH)&lt;/span&gt;
&lt;span class="c"&gt;#define GFP_KERNEL  (__GFP_WAIT | __GFP_IO | __GFP_FS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;GFP_ATOMIC：没有&lt;code&gt;__GFP_WAIT&lt;/code&gt;表明&lt;code&gt;不允许中断且不需要被调度出去&lt;/code&gt;。在中断例程中常用。&lt;/li&gt;
&lt;li&gt;GFP_KERNEL：有可能会被中断和调度出去。驱动中最常用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;页面分配规则和优先级&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不指定：默认使用&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;，如果不足那么到&lt;code&gt;ZONE_DMA&lt;/code&gt;分配空间。&lt;/li&gt;
&lt;li&gt;__GFP_HIGHMEM：先到&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;分配空间，若不足，则到&lt;code&gt;ZONE_NORMAL&lt;/code&gt;去分配页面，如果还是不够，那么就会到&lt;code&gt;ZONE_DMA&lt;/code&gt;中去分配。就是就是从上到下的找空间。&lt;/li&gt;
&lt;li&gt;__GFP_DMA：在&lt;code&gt;ZONE_DMA&lt;/code&gt;中分配页面，如果空间不足，那么失败返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;核心页面分配函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;alloc_pages&lt;/li&gt;
&lt;li&gt;__get_free_pages：无法在HIGHMEM分配页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个函数最终都是调用&lt;code&gt;alloc_pages_node&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;alloc_pages与free_pages&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://hi.baidu.com/tonyhoaspire/item/7a952ec8cbd84c65f7c95d04"&gt;这里&lt;/a&gt;有一个使用此函数的例子。加载这个例子的模块有可能会出现问题：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;mem_map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以查看在/proc/kallsys或者是System.map中是否有这个变量。&lt;/p&gt;
&lt;p&gt;这个例子里面也用到了&lt;code&gt;page_address&lt;/code&gt;来获得内核虚拟地址(&lt;code&gt;KVA&lt;/code&gt;)。
alloc_pages的原型如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;@gfp_mask&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;就是上面说的那些掩码组合&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;@order&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;需要分配空间的&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;的指数值&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="c1"&gt;#define alloc_pages(gfp_mask, order) \&lt;/span&gt;
    &lt;span class="n"&gt;alloc_pages_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numa_node_id&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;gfp_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：
     struct page *pages = alloc_pages(GFP_KERNEL,3);  //分配2^3=8个物理页  &lt;br /&gt;
&lt;code&gt;free_pages&lt;/code&gt;用来释放alloc_pages分配的页。&lt;/p&gt;
&lt;h4&gt;__get_free_pages&lt;/h4&gt;
&lt;p&gt;这个函数除了gfp_mask无法使用__GFP_HIGHTMEM外，与alloc_pages没有什么差别。
使用&lt;code&gt;__free_pages&lt;/code&gt;来释放用此函数分配的页。&lt;/p&gt;
&lt;h3&gt;get_zeroed_page和__get_dma_pages&lt;/h3&gt;
&lt;p&gt;一个是分配填充为0的页，一个是在ZONE_DMA分配页。&lt;/p&gt;
&lt;h2&gt;slab分配器：分配比一个页更小的空间&lt;/h2&gt;
&lt;p&gt;在字符设备驱动中，经常有：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cdev&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cdev_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cdev&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;GFP_KERNEL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里一个cdev结构体比一个page的大小（4KB）小，使用的是kmalloc来分配。slab就是用来完成小空间分配需要的。&lt;/p&gt;
&lt;p&gt;kmem_cache包含多个slab，根据不同的order的放在一个队列上面。而每一个order下又根据使用情况分为三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空闲&lt;/li&gt;
&lt;li&gt;部分空闲&lt;/li&gt;
&lt;li&gt;已满&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="物理内存等映射" src="./static/MemoryManagement/pics/slab.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;slab中的kmalloc和kzalloc&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;slab只能在低端内存区域分配空间，所以即使kmalloc的gfp_mask使用__GFP_HIGHMEM也无法分配到高端内存。&lt;/li&gt;
&lt;li&gt;kzalloc == kmalloc(size,__GFP_ZEROED|flag)&lt;/li&gt;
&lt;li&gt;获得的是连续的物理内存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;虚拟内存管理&lt;/h2&gt;
&lt;h4&gt;vmalloc&lt;/h4&gt;
&lt;p&gt;获得连续的虚拟内存&lt;/p&gt;
&lt;h4&gt;ioremap&lt;/h4&gt;
&lt;p&gt;用来将vmalloc区域的某段虚拟内存区域映射到IO类型的地址。
对于ioremap：
1. 对于外设而言尽可能的使用&lt;code&gt;ioremap_nocache&lt;/code&gt;，这样子可以使得这段区域不被cache
2. 因为IO空间在不同的体系架构上有不同的解释，为了屏蔽这些区别可以使用read[b,w]、write[b,w]
3. 使用方法是&lt;code&gt;ioremap_nocache(physical start address,size)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Per-CPU变量&lt;/h2&gt;
&lt;p&gt;per-CPU变量就是一个变量每个CPU都有一份，这样在访问这些变量的时候就不需要上锁保护以免同时被其他CPU修改，提高了效率。&lt;/p&gt;
&lt;p&gt;per-CPU被放到了特定的段内，且每个CPU都有自己的段，访问的时候就访问自己的段内的变量。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;__percpu&lt;/span&gt; &lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;setction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data..percpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;内存管理整体图&lt;/h2&gt;
&lt;p&gt;在网上看到的一个全局框图（图中的ZUNE应该为ZONE）：
&lt;img alt="Overview" src="./static/MemoryManagement/pics/MemoryManagement.gif" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源于&lt;a href="http://cupic.img168.net/bbsfile/forum/linux/month_0811/20081111_9477e6fe879a69d35b15pPat2RQUajuk.gif"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;★1.CSAPP 2nd Edition：极好的书，对应的VM章节也是非常好，极其容易理解，踏实学完这本书对嵌入式开发有很大的帮助。&lt;/p&gt;
&lt;p&gt;☆2.Linux内核修炼之道：作者还有一本书比这本书有名《Linux那些事儿之我是USB》。修炼之道在大学的时候就看到了，但是看完确实在工作后的地铁上，这本书可以帮助初学linux内核的人对内核有一个总体的认识，并对linux的一些设计的进化和历史有一定的了解。同时讲述了如何查看一个驱动的代码，这些点点滴滴对于初学者是极好的辅助。推荐。&lt;/p&gt;
&lt;p&gt;★3.深入Linux设备驱动程序内核机制：博客前面的图片来源于此书。另外，这本书很不错，刚开始学习Linux设备驱动的同学可以看看，需要注意的是这本书的内核相对于现在的内核算是有点老了，但是瑕不掩瑜。同时可以结合&lt;code&gt;Linux Kernel Development&lt;/code&gt;一起学习。&lt;/p&gt;</summary><category term="ES"></category><category term="LDD"></category><category term="MemoryManagement"></category></entry></feed>