<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>美是美的创造者</title><link href="http://tonyho.github.io/" rel="alternate"></link><link href="http://tonyho.github.io/feeds/all-zhs.atom.xml" rel="self"></link><id>http://tonyho.github.io/</id><updated>2013-09-21T00:00:00+08:00</updated><entry><title>ARM Linux BenchMark</title><link href="http://tonyho.github.io/ARM%20Linux%20BenchMark.html" rel="alternate"></link><updated>2013-09-21T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2013-09-21:ARM Linux BenchMark.html</id><summary type="html">&lt;h2&gt;1.背景说明&lt;/h2&gt;
&lt;p&gt;许多公司有很多不同的ARM SoC的研发产品,ARM核心可能有Cortex-A8/A9/A15，核心数可能有单核双核和四核.现在,几乎每出一款手机,网络上马上就有人对其评测.对比和评测不同ARM SoC 芯片以及嵌入式系统是非常有必要的;通过不同的SoC和其运行的OS对比,可以帮助我们了解我们产品的性能，并根据测试得知系统的瓶颈、找出需要改善的方面。&lt;/p&gt;
&lt;p&gt;嵌入式产品的硬件一般都是由处理器、主存、存储器、显示设备、以及其他外设组成。嵌入式产品的软件方面，一般都选用嵌入式系统，如小的RTOS，如VxWorks、μC/OS-III、RTT、DJYOS、FreeRTOSLinux，或者是更复杂的Linux、Android、WinCE。评测和对比的内容一般也主要由软件和硬件这两个方面组成。&lt;/p&gt;
&lt;h2&gt;2.预备基础知识&lt;/h2&gt;
&lt;p&gt;如果只是对Andorid系统或者是WinCE相关系统评测，那么我们完全可以下载一些应用（安装）运行即可评测。而如果要评测的嵌入式系统是基于Linux自己定制的甚至没有GUI的，则很可能需要我们下载源代码编译。因此对基础的编译知识的了解必不可少①。编译配置又与ARM SoC构架相关，所以需要了解一下与ARM构架以及有关的交叉编译的选项，比较ARM SoC种类较少，所以这类问题变得很简单了，一般我们需要根据需要配置&lt;code&gt;-mfpu&lt;/code&gt;和&lt;code&gt;-march&lt;/code&gt;以及&lt;code&gt;-mfloat-abi&lt;/code&gt;，以及编译优化选项。&lt;/p&gt;
&lt;h2&gt;3.评测工具介绍&lt;/h2&gt;
&lt;p&gt;评测工具有很多，在&lt;a href="http://niyunjiu.iteye.com/blog/316302"&gt;这个网页&lt;/a&gt;列出了几十个工具。单单系统性评测工具就有7个。那什么是系统性的BenchMark（引用自&lt;a href="https://code.google.com/p/byte-unixbench/"&gt;unixbench&lt;/a&gt;）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do be aware that this is a system benchmark, not a CPU, RAM or disk benchmark. The results will depend not only on your hardware, but on your operating system, libraries, and even compiler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;系统测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用得比较广的系统性测试工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lmbench④&lt;/li&gt;
&lt;li&gt;UnixBench&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个BenchMark软件，本身是给PC上的Linux上用的，为了给嵌入式开发板子使用，需要交叉编译。和其他嵌入式程序编译一样，一般Makefile要改的只有两个地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CC：指定为嵌入式交叉编译器&lt;/li&gt;
&lt;li&gt;CFLAGS：需要根据目标板ARM芯片配置②&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一些单项测试工具：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将系统测试里面的每个测试项拆开就成了单项测试，一般分为计算性能③，内存性能，图形显示。&lt;/p&gt;
&lt;p&gt;有一点需要说明的是：在linux启动过程中会打印BogoMIPS不一定准确。这方面可以参考ARM官方的说明，使用Dhrystone，当然现在在计算能力测试方面，现在大家可能更认可CoreMark和CPU2006，而不是Dhrystone。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一些外设的测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SD/eMMC可以使用dd命令来测试，例如一个读写的测试命令示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4094&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40960&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; 
&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4094&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40960&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用date只能精确到秒，但是使用time命令可以精确到0.01S，所以用time更好，但是time只接受一个process作为参数。因此，需要将dd与sync整条命令放入到脚本中，再用time来运行这个脚本。&lt;/p&gt;
&lt;h2&gt;4.测试结果分析&lt;/h2&gt;
&lt;p&gt;如果就拿单单一个光秃秃的数据来看，会显得有些空白，所以一般用不同的板子数据进行对比来看。在&lt;code&gt;lmbench&lt;/code&gt;中，就可以将测试结果拷贝到result中的对应OS目录中，再用&lt;code&gt;make see&lt;/code&gt;，产生summary.out文件。其他的测试软件也有类似的功能，对于测试结果，我们需要做的是通过分析测试结果找到系统中性能与理论相差太大的不正常项目，然后去分析可能的原因并寻求解决之道。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;①可以看&lt;a href="http://forums.anandtech.com/showthread.php?t=2330027"&gt;AnTuTu and Intel&lt;/a&gt;这篇文章，里面提到了安兔兔对ICC编译器对Intel处理器的优化，ARM这边却连neon也没有使用。同时&lt;a href="http://www.eetimes.com/author.asp?section_id=36&amp;amp;doc_id=1318894"&gt;另一篇文章&lt;/a&gt;说到了安兔兔在版本变高后，评分下降的issue。&lt;/p&gt;
&lt;p&gt;②关于编译选项，可以man gcc，搜索对应的选项来查看详细内容。给出一个CLFAGS示例：
&lt;img alt="CFLAGS" src="./static/ArmBenchMark/CFLAGS.png" /&gt;
其中这些参数可以在kernel启动后使用&lt;code&gt;cat /proc/cpuinfo&lt;/code&gt;查看Arch架构。&lt;/p&gt;
&lt;p&gt;③关于计算方面的测试，有一个不错的文档&lt;a href="http://www.ee.unlv.edu/~meiyang/ecg700/readings/ARM%20Cortex-A8%20vs.%20Intel%20Atom.pdf"&gt;ARM Cortex-A8 vs. Intel Atom&lt;/a&gt;：，里面介绍了4中测试Integer和Float的工具，并用这些工具对Atom和Beagle Bone板子进行的测试比较和说明。另外&lt;a href="http://www.keil.com/benchmarks/"&gt;Keil的这个网页&lt;/a&gt;上对这些测试程序和Item也有一些介绍。&lt;/p&gt;
&lt;p&gt;④编译与运行可以参考&lt;a href="http://blog.sina.com.cn/s/blog_5d9051c00100dl2z.html"&gt;这个网页的文章&lt;/a&gt;，需要根据直接的板子SoC更改CFLAGS。&lt;/p&gt;
&lt;hr /&gt;</summary><category term="ES"></category></entry><entry><title>About the blog</title><link href="http://tonyho.github.io/About.html" rel="alternate"></link><updated>2010-12-03T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2010-12-03:About.html</id><summary type="html">&lt;h2&gt;欢迎使用 MarkdownPad 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MarkdownPad&lt;/strong&gt; 是 Windows 平台上一个功能完善的 Markdown 编辑器。&lt;/p&gt;
&lt;h3&gt;专为 Markdown 打造&lt;/h3&gt;
&lt;p&gt;提供了语法高亮和方便的快捷键功能，给您最好的 Markdown 编写体验。&lt;/p&gt;
&lt;p&gt;来试一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粗体&lt;/strong&gt; (&lt;code&gt;Ctrl+B&lt;/code&gt;) and &lt;em&gt;斜体&lt;/em&gt; (&lt;code&gt;Ctrl+I&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;引用 (&lt;code&gt;Ctrl+Q&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;代码块 (&lt;code&gt;Ctrl+K&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;标题 1, 2, 3 (&lt;code&gt;Ctrl+1&lt;/code&gt;, &lt;code&gt;Ctrl+2&lt;/code&gt;, &lt;code&gt;Ctrl+3&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;列表 (&lt;code&gt;Ctrl+U&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+O&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实时预览，所见即所得&lt;/h3&gt;
&lt;p&gt;无需猜测您的 &lt;a href="http://markdownpad.com"&gt;语法&lt;/a&gt; 是否正确；每当您敲击键盘，实时预览功能都会立刻准确呈现出文档的显示效果。&lt;/p&gt;
&lt;h3&gt;自由定制&lt;/h3&gt;
&lt;p&gt;100% 可自定义的字体、配色、布局和样式，让您可以将 MarkdownPad 配置的得心应手。&lt;/p&gt;
&lt;h3&gt;为高级用户而设计的稳定的 Markdown 编辑器&lt;/h3&gt;
&lt;p&gt;MarkdownPad 支持多种 Markdown 解析引擎，包括 标准 Markdown 、 Markdown 扩展 (包括表格支持) 以及 GitHub 风格 Markdown 。&lt;/p&gt;
&lt;p&gt;有了标签式多文档界面、PDF 导出、内置的图片上传工具、会话管理、拼写检查、自动保存、语法高亮以及内置的 CSS 管理器，您可以随心所欲地使用 MarkdownPad。&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>For time test</title><link href="http://tonyho.github.io/Test-blog.html" rel="alternate"></link><updated>2010-12-03T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2010-12-03:Test-blog.html</id><summary type="html">&lt;p&gt;Hi here is the work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ES"></category></entry><entry><title>Third time test</title><link href="http://tonyho.github.io/Third-blog.html" rel="alternate"></link><updated>2010-12-03T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2010-12-03:Third-blog.html</id><summary type="html">&lt;p&gt;Hi here is the work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ES"></category></entry><entry><title>Second time test</title><link href="http://tonyho.github.io/test-blog.html" rel="alternate"></link><updated>2010-12-03T00:00:00+08:00</updated><author><name>TonyHo</name></author><id>tag:tonyho.github.io,2010-12-03:test-blog.html</id><summary type="html">&lt;p&gt;Hi here is the work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="blog"></category></entry></feed>